import discord
import logging
import psutil  # –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
import config
import api_handler
from message_handler import process_response, send_long_message

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ
current_model = "deepseek-r1:1.5b"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º–æ–¥–µ–ª—å

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ
async def switch_model(message, model_type):
    global current_model
    if model_type == "low":
        current_model = "deepseek-r1:1.5b"
        await message.channel.send(f"–ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {current_model}")
    elif model_type == "high":
        current_model = "deepseek-r1:8b"
        await message.channel.send(f"–ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {current_model}")
    else:
        await message.channel.send("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ–¥–∏–Ω –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤: `low` –∞–±–æ `high`")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
async def system_status(message):
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞
    cpu_usage = psutil.cpu_percent(interval=1)  # –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞ –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
    memory = psutil.virtual_memory()
    memory_usage = memory.percent  # –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ –Ω–∞ –¥–∏—Å–∫—É
    disk = psutil.disk_usage('/')
    disk_usage = disk.percent  # –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–∞

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    status_message = (
        f"üíª **–°–∏—Å—Ç–µ–º–∞**:\n"
        f"üîπ **–ü—Ä–æ—Ü–µ—Å–æ—Ä**: {cpu_usage}%\n"
        f"üîπ **–ü–∞–º'—è—Ç—å**: {memory_usage}%\n"
        f"üîπ **–î–∏—Å–∫**: {disk_usage}%\n"
    )
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await message.channel.send(status_message)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@client.event
async def on_message(message):
    if message.author == client.user:
        return  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !switch –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ
    if message.content.startswith("!switch"):
        parts = message.content.split()
        if len(parts) == 2:
            await switch_model(message, parts[1])
        else:
            await message.channel.send("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç: `!switch low` –∞–±–æ `!switch high`")
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !systemstatus –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if message.content.startswith("!systemstatus"):
        await system_status(message)
        return

    # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ —á–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É, –æ–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    prompt = message.content.strip()

    # –ó–∞–ø–∏—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–æ–¥–µ–ª—ñ
    response = api_handler.ask_ollama(prompt, current_model)

    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–≤–∏–¥–∞–ª—è—î–º–æ <think>...</think>)
    processed_response = process_response(response)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if processed_response:  # –Ø–∫—â–æ —â–æ—Å—å –∑–∞–ª–∏—à–∏–ª–æ—Å—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        await send_long_message(message.channel, processed_response)

# –ü–æ–¥—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
@client.event
async def on_ready():
    logging.info(f"–ë–æ—Ç —É–≤—ñ–π—à–æ–≤ —É —Å–∏—Å—Ç–µ–º—É —è–∫ {client.user}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.run(config.DISCORD_API_KEY)
